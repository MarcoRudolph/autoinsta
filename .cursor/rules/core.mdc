---
description: 
globs: 
alwaysApply: true
---
---
description: Core coding standards and project conventions for "rudolpho-chat" web app.
globs: "**"
alwaysApply: true
---

# Core Project Rules for "rudolpho-chat" Web App

This document outlines the coding standards, preferred libraries, naming conventions, file structure, error handling, documentation, testing, and commit message format for the "rudolpho-chat" Next.js application. Adhering to these rules ensures consistency, maintainability, and quality across the codebase.

## 1. Coding Standards

* **Language:** Always use TypeScript for all new code.
* **Type Safety:**
    * Enable and adhere to strict TypeScript compilation settings (`"strict": true` in `tsconfig.json`).
    * Explicitly define types for function parameters, return values, and complex variables. Avoid `any` type unless absolutely necessary and provide a clear justification.
    * Prioritize type inference where clear, but prefer explicit types for public APIs and complex data structures.
* **Immutability:** Favor immutable data structures and operations where possible, especially in React state management.
* **ESLint & Prettier:** Assume ESLint and Prettier are configured and adhere to their rules. Ensure code is formatted automatically.
* **Modern JavaScript/TypeScript Features:** Utilize modern ECMAScript and TypeScript features (e.g., arrow functions, destructuring, `async/await`, optional chaining, nullish coalescing) appropriately.
* **Functional Programming:** Favor functional components and hooks in React. Prefer pure functions where state or side effects are not involved.
* **No Redundant Code:** Avoid commented-out code, dead code, or redundant logic. If code is no longer needed, remove it.

## 2. Preferred Libraries/Frameworks

* **Frontend Framework:** Next.js (App Router).
* **UI Library:** React.
* **Component Library:** Shadcn
* **Styling:** Tailwind CSS for all styling. Use Shadcn UI components as a base and customize with Tailwind utilities. Avoid raw CSS files where possible, except for global styles.
* **Database ORM:** Drizzle ORM for PostgreSQL.
* **Authentication:** own tables and UI for authentication. 
* **Validation:** Zod for all schema validation (frontend and backend).
* **AI Integration:** External AI APIs (e.g., OpenAI models) accessed via Next.js API routes.

## 3. Naming Conventions

* **Folders & Files:**
    * Use `kebab-case` for directories (e.g., `components/auth-forms`).
    * Use `PascalCase` for React component files (e.g., `LoginForm.tsx`, `Header.tsx`).
    * Use `camelCase` for utility files, hooks, and API routes (e.g., `api/users.ts`, `useAuth.ts`, `formatDate.ts`).
    * Database schema files should follow a clear pattern, e.g., `db/schema/users.ts`.
* **React Components:** Always use `PascalCase` (e.g., `UserProfile`, `GameCard`).
* **Variables & Functions:** Use `camelCase` (e.g., `userName`, `fetchUserData`, `calculateScore`).
* **Constants:** Use `SCREAMING_SNAKE_CASE` for global constants (e.g., `API_BASE_URL`, `MAX_RETRIES`).
* **Types & Interfaces:** Use `PascalCase` and prefix with `I` for interfaces (e.g., `IUser`, `IProduct`) or without for types (e.g., `UserType`, `Product`). Consistent preference is to use `type` aliases where possible, e.g. `type User = { ... }`.
* **Drizzle Schema:** Table names should be plural `camelCase` (e.g., `users`, `sessions`), and column names `camelCase` (e.g., `createdAt`, `userId`).

## 4. File Structure

* **Next.js App Router Structure:** Follow Next.js App Router conventions.
    * `app/`: Contains routes, layouts, pages, and API routes (`route.ts`). Group related routes into folders.
    * `app/(auth)/`: For authentication-related routes (e.g., login, register).
    * `app/(main)/`: For main application routes.
* **`src/` Directory:** All application source code should reside in `src/`.
    * `src/components/`: Reusable UI components.
        * `src/components/ui/`: Shadcn UI components (generated by `shadcn-ui add`).
        * `src/components/common/`: Generic, widely reusable components.
        * `src/components/[feature]/`: Components specific to a feature (e.g., `src/components/auth/LoginForm.tsx`).
    * `src/lib/`:
        * `src/lib/db/`: Drizzle ORM setup, database connection, schema definitions (`src/lib/db/schema.ts`).
        * `src/lib/utils/`: General utility functions (e.g., `formatters.ts`, `helpers.ts`).
        * `src/lib/auth/`: Clerk-related helpers, middleware, and API interactions.
        * `src/lib/ai/`: AI service integration logic.
        * `src/lib/validation/`: Zod schemas.
    * `src/hooks/`: Custom React hooks.
    * `src/services/`: API client functions, external service integrations.
    * `src/styles/`: Global CSS or Tailwind configuration extensions.
    * `src/types/`: Global TypeScript type definitions.
    * `src/middleware.ts`: Next.js middleware for authentication/routing.
    * `src/app/api/`: Next.js API routes for backend endpoints.
* **Co-location:** Keep related files together. For example, if a component has its own specific styling or utility, consider placing it in the same directory as the component.

## 5. Error Handling

* **Robust Handling:** Implement robust error handling with `try-catch` blocks for asynchronous operations (API calls, database queries).
* **User Feedback:** Always provide meaningful error messages to the user where applicable, avoiding technical jargon.
* **Logging:** Log errors to the console during development and consider integrating a logging service for production (e.g., Sentry, Winston).
* **Validation Errors:** Use Zod for input validation and handle validation errors gracefully, providing specific feedback to the user about invalid inputs.
* **Centralized Error Boundaries:** Utilize React Error Boundaries for catching UI errors and preventing the entire application from crashing.
* **API Error Responses:** Standardize API error responses (e.g., consistent JSON format with `code`, `message`, `details`).

## 6. Documentation

* **Explanatory Comments:** Include explanatory comments for complex logic, non-obvious code, or tricky algorithms.
* **JSDoc:** Use JSDoc comments for all functions, components, and public API endpoints to describe their purpose, parameters, return values, and any side effects. This significantly helps with IDE intellisense.
* **README.md:** Maintain a comprehensive `README.md` at the project root, including setup instructions, project overview, and deployment guidance.
* **Inline Documentation:** For UI components, add props documentation.

## 7. Testing Preferences

* **Framework:** Use Cypress for End-to-End (E2E) and integration testing.
* **Test Structure:**
    * Organize Cypress tests in `cypress/e2e` or `cypress/integration` directories, mirroring the application's feature structure.
    * Each test file should be independent.
    * Use descriptive `describe` and `it` blocks.
* **Selectors:** Prefer `data-testid` or `data-cy` attributes for selecting elements in tests to avoid coupling tests to CSS classes or IDs.
* **API Stubbing:** Use `cy.intercept()` to stub network requests for consistent and fast tests.
* **Page Objects/Custom Commands:** Utilize Cypress custom commands or a Page Object model for reusable test logic and better maintainability.
* **Assertions:** Prefer chaining assertions for readability (`.should().and()`).

## 8. Commit Message Format

* **Conventional Commits:** Adhere strictly to the Conventional Commits specification.
    * **Format:** `<type>[optional scope]: <description>`
    * **Types:**
        * `feat`: A new feature
        * `fix`: A bug fix
        * `docs`: Documentation only changes
        * `style`: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)
        * `refactor`: A code change that neither fixes a bug nor adds a feature
        * `perf`: A code change that improves performance
        * `test`: Adding missing tests or correcting existing tests
        * `build`: Changes that affect the build system or external dependencies
        * `ci`: Changes to our CI configuration files and scripts
        * `chore`: Other changes that don't modify src or test files
        * `revert`: Reverts a previous commit
    * **Scope (Optional):** A noun describing a section of the codebase (e.g., `(auth)`, `(landing-page)`, `(db)`, `(game-core)`).
    * **Description:** A short, imperative, present-tense summary of the change.
    * **Body (Optional):** A longer explanation of the commit, if necessary.
    * **Breaking Changes:** Indicated by `!` after the type/scope or by `BREAKING CHANGE:` in the footer.

---